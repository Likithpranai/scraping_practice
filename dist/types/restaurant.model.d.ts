/**
 * @file Defines the core data structure for a Restaurant entity.
 */
import { TagTypeCategory, TagBudgetCategory, TagGroupCategory, RecognitionDetail } from './common.model';
/**
 * The primary interface for a Restaurant object.
 */
export interface Restaurant {
    /**
     * The primary, English-language name of the establishment.
     * @example "Yat Lok"
     */
    name: string;
    /**
     * The original name of the establishment. Note that not all restaurants have a local name, it may only have an English or other foreign language name.
     * @example "一樂燒鵝"
     */
    local_name: string;
    /**
     * The type of entity. For this model, it will be 'restaurants' | "cafes" | "bars & nightlife".
     * @example "restaurants"
     */
    type: 'restaurants' | 'cafes' | 'bars & nightlife';
    /**
     * The full, formatted mailing address of the restaurant.
     * @example "Yat Lok, G/F, 34-38 Stanley Street, Central, Hong Kong"
     */
    address: string;
    /**
     * The specific neighborhood or district where the restaurant is located.
     * @example "Central"
     */
    neighborhood: string;
    /**
     * A calculated score (0-100) indicating how much of a "hidden gem" this place is.
     * @example 25
     */
    hidden_gem_score: number;
    /**
     * A detailed, descriptive text generated by an LLM, optimized for semantic search.
     * @example "A long-running Michelin Bib Gourmand award winner..."
     */
    text_embedding: string;
    /**
     * Actionable tips and insider advice for visitors.
     * @example "Ask for the soup and plum sauce on the side so the skin stays crispy."
     */
    local_tips: string;
    /**
     * An object scoring the restaurant against various experience types.
     */
    tags_type: Record<TagTypeCategory, number>;
    /**
     * An object classifying the restaurant's price range.
     */
    tags_budget: Record<TagBudgetCategory, number>;
    /**
     * An object scoring the restaurant's suitability for different social groups.
     */
    tags_group: Record<TagGroupCategory, number>;
    /**
     * A list of signature dishes or must-try food items.
     * @example ["Roast goose leg", "Goose leg with noodle soup"]
     */
    signature_food: string[];
    /**
     * A collection of awards, accolades, or notable mentions from various sources.
     * The key is the source (e.g., "Michelin Guide"), and the value is a `RecognitionDetail` object.
     * If this is from a scraping strategy result, it will only have one key.
     * If this is from a merger, it may have multiple keys.
     */
    recognition: Record<string, RecognitionDetail>;
}
export declare const RestaurantJSONSchema = "\n{\n  \"name\": \"string\",\n  \"local_name\": \"string (Chinese name if available, dont forcefully translate if the original name is in a foreign language)\",\n  \"type\": \"restaurants|cafes|bars & nightlife\",\n  \"address\": \"string\",\n  \"neighborhood\": \"string\",\n  \"hidden_gem_score\": \"number (0-100)\",\n  \"text_embedding\": \"string\",\n  \"local_tips\": \"string\",\n  \"tags_type\": {\n    \"Food\": \"number (0-100)\",\n    \"Art & Culture\": \"number (0-100)\",\n    \"History\": \"number (0-100)\",\n    \"Nature\": \"number (0-100)\",\n    \"Leisure\": \"number (0-100)\",\n    \"Adventure\": \"number (0-100)\",\n    \"Shopping\": \"number (0-100)\",\n    \"Entertainment\": \"number (0-100)\",\n    \"Photography\": \"number (0-100)\",\n    \"Sports\": \"number (0-100)\",\n    \"Hidden Gems\": \"number (0-100)\",\n    \"Wellness\": \"number (0-100)\",\n    \"Nightlife\": \"number (0-100)\",\n    \"Educational\": \"number (0-100)\"\n  },\n  \"tags_budget\": {\n    \"Free\": \"number (0 or 1)\",\n    \"Budget friendly\": \"number (0 or 1)\",\n    \"Moderately priced\": \"number (0 or 1)\",\n    \"High-end\": \"number (0 or 1)\",\n    \"Luxury\": \"number (0 or 1)\"\n  },\n  \"tags_group\": {\n    \"Date\": \"number (0-100)\",\n    \"Friends\": \"number (0-100)\",\n    \"Family\": \"number (0-100)\",\n    \"Colleagues\": \"number (0-100)\",\n    \"Business\": \"number (0-100)\"\n  },\n  \"signature_food\": [\"string\"],\n  \"recognition\": {\n    \"string (source name e.g. 'Michelin Guide')\": {\n      \"source\": \"string (e.g. 'Michelin Guide')\",\n      \"text\": \"string (e.g. 'Bib Gourmand Award 2023')\",\n      \"url\": \"string | null\"\n    }\n  }\n}\n";
export declare const RestaurantDefinitions = "\nexport interface Restaurant {\n  /**\n   * The primary, English-language name of the establishment.\n   * @example \"Yat Lok\"\n   */\n  name: string;\n\n  /**\n   * The original name of the establishment. Note that not all restaurants have a local name, it may only have an English or other foreign language name.\n   * @example \"\u4E00\u6A02\u71D2\u9D5D\"\n   */\n  local_name: string;\n\n  /**\n   * The type of entity. For this model, it will be 'restaurants' | \"cafes\" | \"bars & nightlife\".\n   * @example \"restaurants\"\n   */\n  type: 'restaurants' | 'cafes' | 'bars & nightlife';\n\n  /**\n   * The full, formatted mailing address of the restaurant.\n   * @example \"Yat Lok, G/F, 34-38 Stanley Street, Central, Hong Kong\"\n   */\n  address: string;\n\n  /**\n   * The specific neighborhood or district where the restaurant is located.\n   * @example \"Central\"\n   */\n\tneighborhood: string;\n\n  /**\n   * A calculated score (0-100) indicating how much of a \"hidden gem\" this place is.\n   * If it is a well-known restaurant, this will be low.\n   * If it is a lesser-known but highly rated restaurant, this will be high.\n   * @example 25\n   */\n  hidden_gem_score: number;\n\n  /**\n   * A detailed, descriptive text generated by an LLM, optimized for semantic search.\n   * @example \"A long-running Michelin Bib Gourmand award winner...\"\n   */\n  text_embedding: string;\n\n  /**\n   * Actionable tips and insider advice for visitors.\n   * @example \"Ask for the soup and plum sauce on the side so the skin stays crispy.\"\n   */\n  local_tips: string;\n\n  /**\n   * An object scoring the restaurant against various experience types.\n   * Most likely the tags other than \"Food\" and \"Hidden Gems\" will be low/0 for restaurants.\n   * This is a distribution of 100 scores among the tags.\n   */\n  tags_type: Record<TagTypeCategory, number>;\n\n  /**\n   * An object classifying the restaurant's price range.\n   * Only one tag can be active (1) at a time, representing the budget level.\n   */\n  tags_budget: Record<TagBudgetCategory, number>;\n\n  /**\n   * An object scoring the restaurant's suitability for different social groups.\n   * This is a distribution of 100 scores among the tags.\n   */\n  tags_group: Record<TagGroupCategory, number>;\n\n  /**\n   * A list of signature dishes or must-try food items.\n   * @example [\"Roast goose leg\", \"Goose leg with noodle soup\"]\n   */\n  signature_food: string[];\n\n  /**\n   * A collection of awards, accolades, or notable mentions from various sources.\n   * The key is the source (e.g., \"Michelin Guide\"), and the value is a `RecognitionDetail` object.\n   * If this is from a scraping strategy result, it will only have one key.\n   * If this is from a merger, it may have multiple keys.\n   */\n  recognition: Record<string, RecognitionDetail>;\n}";
//# sourceMappingURL=restaurant.model.d.ts.map