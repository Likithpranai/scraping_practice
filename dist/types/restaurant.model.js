"use strict";
/**
 * @file Defines the core data structure for a Restaurant entity.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RestaurantDefinitions = exports.RestaurantJSONSchema = void 0;
exports.RestaurantJSONSchema = `
{
  "name": "string",
  "local_name": "string (Chinese name if available, dont forcefully translate if the original name is in a foreign language)",
  "type": "restaurants|cafes|bars & nightlife",
  "address": "string",
  "neighborhood": "string",
  "hidden_gem_score": "number (0-100)",
  "text_embedding": "string",
  "local_tips": "string",
  "tags_type": {
    "Food": "number (0-100)",
    "Art & Culture": "number (0-100)",
    "History": "number (0-100)",
    "Nature": "number (0-100)",
    "Leisure": "number (0-100)",
    "Adventure": "number (0-100)",
    "Shopping": "number (0-100)",
    "Entertainment": "number (0-100)",
    "Photography": "number (0-100)",
    "Sports": "number (0-100)",
    "Hidden Gems": "number (0-100)",
    "Wellness": "number (0-100)",
    "Nightlife": "number (0-100)",
    "Educational": "number (0-100)"
  },
  "tags_budget": {
    "Free": "number (0 or 1)",
    "Budget friendly": "number (0 or 1)",
    "Moderately priced": "number (0 or 1)",
    "High-end": "number (0 or 1)",
    "Luxury": "number (0 or 1)"
  },
  "tags_group": {
    "Date": "number (0-100)",
    "Friends": "number (0-100)",
    "Family": "number (0-100)",
    "Colleagues": "number (0-100)",
    "Business": "number (0-100)"
  },
  "signature_food": ["string"],
  "recognition": {
    "string (source name e.g. 'Michelin Guide')": {
      "source": "string (e.g. 'Michelin Guide')",
      "text": "string (e.g. 'Bib Gourmand Award 2023')",
      "url": "string | null"
    }
  }
}
`;
exports.RestaurantDefinitions = `
export interface Restaurant {
  /**
   * The primary, English-language name of the establishment.
   * @example "Yat Lok"
   */
  name: string;

  /**
   * The original name of the establishment. Note that not all restaurants have a local name, it may only have an English or other foreign language name.
   * @example "一樂燒鵝"
   */
  local_name: string;

  /**
   * The type of entity. For this model, it will be 'restaurants' | "cafes" | "bars & nightlife".
   * @example "restaurants"
   */
  type: 'restaurants' | 'cafes' | 'bars & nightlife';

  /**
   * The full, formatted mailing address of the restaurant.
   * @example "Yat Lok, G/F, 34-38 Stanley Street, Central, Hong Kong"
   */
  address: string;

  /**
   * The specific neighborhood or district where the restaurant is located.
   * @example "Central"
   */
	neighborhood: string;

  /**
   * A calculated score (0-100) indicating how much of a "hidden gem" this place is.
   * If it is a well-known restaurant, this will be low.
   * If it is a lesser-known but highly rated restaurant, this will be high.
   * @example 25
   */
  hidden_gem_score: number;

  /**
   * A detailed, descriptive text generated by an LLM, optimized for semantic search.
   * @example "A long-running Michelin Bib Gourmand award winner..."
   */
  text_embedding: string;

  /**
   * Actionable tips and insider advice for visitors.
   * @example "Ask for the soup and plum sauce on the side so the skin stays crispy."
   */
  local_tips: string;

  /**
   * An object scoring the restaurant against various experience types.
   * Most likely the tags other than "Food" and "Hidden Gems" will be low/0 for restaurants.
   * This is a distribution of 100 scores among the tags.
   */
  tags_type: Record<TagTypeCategory, number>;

  /**
   * An object classifying the restaurant's price range.
   * Only one tag can be active (1) at a time, representing the budget level.
   */
  tags_budget: Record<TagBudgetCategory, number>;

  /**
   * An object scoring the restaurant's suitability for different social groups.
   * This is a distribution of 100 scores among the tags.
   */
  tags_group: Record<TagGroupCategory, number>;

  /**
   * A list of signature dishes or must-try food items.
   * @example ["Roast goose leg", "Goose leg with noodle soup"]
   */
  signature_food: string[];

  /**
   * A collection of awards, accolades, or notable mentions from various sources.
   * The key is the source (e.g., "Michelin Guide"), and the value is a \`RecognitionDetail\` object.
   * If this is from a scraping strategy result, it will only have one key.
   * If this is from a merger, it may have multiple keys.
   */
  recognition: Record<string, RecognitionDetail>;
}`;
//# sourceMappingURL=restaurant.model.js.map